{
  "errors": [],
  "generated_at": "2019-08-20T04:17:41Z",
  "metrics": {
    ".\\sqlite3_archive\\__init__.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 0,
      "nosec": 0
    },
    ".\\sqlite3_archive\\fileinfo.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 39,
      "nosec": 0
    },
    ".\\sqlite3_archive\\utility.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 206,
      "nosec": 0
    },
    ".\\sqlite_archive.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 7.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 7.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 503,
      "nosec": 0
    },
    "_totals": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 7.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 7.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 748,
      "nosec": 0
    }
  },
  "results": [
    {
      "code": "372                             self.execquerynocommit(\n373                                 f\"select count(distinct filename) from {args.table} where filename = ?\", values=(fileinfo.name, ), one=True)[0])\n374                         if args.debug or args.verbose:\n",
      "filename": ".\\sqlite_archive.py",
      "issue_confidence": "LOW",
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 373,
      "line_range": [
        373
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "383             except sqlite3.IntegrityError:\n384                 query = self.execquerynocommit(f\"select filename from {args.table} where hash == ?\", (fileinfo.digest, ))[0][0]\n385                 querytype = type(query)\n",
      "filename": ".\\sqlite_archive.py",
      "issue_confidence": "LOW",
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 384,
      "line_range": [
        384
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "447                     questionmarks: Any = '?' * fileslen\n448                     out = f\"select rowid, data from {args.table} where filename in ({','.join(questionmarks)}) order by filename asc\"\n449                     # out = f\"select rowid, data from {args.table} where filename in (?) order by filename asc\" # executemany doesn't work on select satements, apparently\n",
      "filename": ".\\sqlite_archive.py",
      "issue_confidence": "LOW",
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 448,
      "line_range": [
        448
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "450                 if self.files and fileslen == 1:\n451                     out = f\"select rowid, data from {args.table} where filename == ? order by filename asc\"\n452             else:\n",
      "filename": ".\\sqlite_archive.py",
      "issue_confidence": "LOW",
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 451,
      "line_range": [
        451
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "452             else:\n453                 out = f\"select rowid, data from {args.table} order by filename asc\"\n454 \n",
      "filename": ".\\sqlite_archive.py",
      "issue_confidence": "LOW",
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 453,
      "line_range": [
        453
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "505                 fileinfo.name = self.execquerynocommit(\n506                     f\"select filename from {args.table} where rowid == ?\", values=(str(row[\"rowid\"]), ), one=True, decode=True)\n507                 fileinfo.digest = self.execquerynocommit(\n",
      "filename": ".\\sqlite_archive.py",
      "issue_confidence": "LOW",
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 506,
      "line_range": [
        506
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "507                 fileinfo.digest = self.execquerynocommit(\n508                     f\"select hash from {args.table} where rowid == ?\", values=(str(row[\"rowid\"]), ), one=True, decode=True)\n509 \n",
      "filename": ".\\sqlite_archive.py",
      "issue_confidence": "LOW",
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 508,
      "line_range": [
        508
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    }
  ]
}